{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10211,"databundleVersionId":111096,"sourceType":"competition"},{"sourceId":15520,"sourceType":"datasetVersion","datasetId":11167},{"sourceId":38454,"sourceType":"datasetVersion","datasetId":2709}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**This notebook is an exercise in the [Introduction to Machine Learning](https://www.kaggle.com/learn/intro-to-machine-learning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/dansbecker/your-first-machine-learning-model).**\n\n---\n","metadata":{}},{"cell_type":"markdown","source":"## Recap\nSo far, you have loaded your data and reviewed it with the following code. Run this cell to set up your coding environment where the previous step left off.","metadata":{}},{"cell_type":"code","source":"# Code you have previously used to load data\nimport pandas as pd\n\n# Path of the file to read\niowa_file_path = '../input/home-data-for-ml-course/train.csv'\n\nhome_data = pd.read_csv(iowa_file_path)\n\n# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex3 import *\n\nprint(\"Setup Complete\")","metadata":{"execution":{"iopub.status.busy":"2024-07-08T18:58:02.748450Z","iopub.execute_input":"2024-07-08T18:58:02.748836Z","iopub.status.idle":"2024-07-08T18:58:06.543503Z","shell.execute_reply.started":"2024-07-08T18:58:02.748804Z","shell.execute_reply":"2024-07-08T18:58:06.542033Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Setup Complete\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Exercises\n\n## Step 1: Specify Prediction Target\nSelect the target variable, which corresponds to the sales price. Save this to a new variable called `y`. You'll need to print a list of the columns to find the name of the column you need.\n","metadata":{}},{"cell_type":"code","source":"# print the list of columns in the dataset to find the name of the prediction target","metadata":{"execution":{"iopub.status.busy":"2024-07-08T18:58:06.550531Z","iopub.execute_input":"2024-07-08T18:58:06.551061Z","iopub.status.idle":"2024-07-08T18:58:06.559079Z","shell.execute_reply.started":"2024-07-08T18:58:06.551012Z","shell.execute_reply":"2024-07-08T18:58:06.556491Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# print(home_data.columns)\ny = home_data.SalePrice\nprint(home_data.head(5))\n\n# Check your answer\nstep_1.check()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T18:58:06.568139Z","iopub.execute_input":"2024-07-08T18:58:06.568659Z","iopub.status.idle":"2024-07-08T18:58:06.709700Z","shell.execute_reply.started":"2024-07-08T18:58:06.568593Z","shell.execute_reply":"2024-07-08T18:58:06.708399Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n\n  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n\n  YrSold  SaleType  SaleCondition  SalePrice  \n0   2008        WD         Normal     208500  \n1   2007        WD         Normal     181500  \n2   2008        WD         Normal     223500  \n3   2006        WD        Abnorml     140000  \n4   2008        WD         Normal     250000  \n\n[5 rows x 81 columns]\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_SetTarget\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"code","source":"# The lines below will show you a hint or the solution.\n# step_1.hint() \n# step_1.solution()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T18:58:06.711247Z","iopub.execute_input":"2024-07-08T18:58:06.711719Z","iopub.status.idle":"2024-07-08T18:58:06.717704Z","shell.execute_reply.started":"2024-07-08T18:58:06.711678Z","shell.execute_reply":"2024-07-08T18:58:06.716285Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"## Step 2: Create X\nNow you will create a DataFrame called `X` holding the predictive features.\n\nSince you want only some columns from the original data, you'll first create a list with the names of the columns you want in `X`.\n\nYou'll use just the following columns in the list (you can copy and paste the whole list to save some typing, though you'll still need to add quotes):\n  * LotArea\n  * YearBuilt\n  * 1stFlrSF\n  * 2ndFlrSF\n  * FullBath\n  * BedroomAbvGr\n  * TotRmsAbvGrd\n\nAfter you've created that list of features, use it to create the DataFrame that you'll use to fit the model.","metadata":{}},{"cell_type":"code","source":"# Create the list of features below\nfeature_names = [\n    'LotArea',\n    'YearBuilt',\n    '1stFlrSF',\n    '2ndFlrSF',\n    'FullBath',\n    'BedroomAbvGr',\n    'TotRmsAbvGrd'\n]\n\n# Select data corresponding to features in feature_names\nX = home_data[feature_names]\n\n# Check your answer\nstep_2.check()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T18:58:06.720338Z","iopub.execute_input":"2024-07-08T18:58:06.720803Z","iopub.status.idle":"2024-07-08T18:58:06.743566Z","shell.execute_reply.started":"2024-07-08T18:58:06.720770Z","shell.execute_reply":"2024-07-08T18:58:06.742226Z"},"trusted":true},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"2_SelectPredictionData\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"code","source":"# step_2.hint()\n# step_2.solution()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T18:58:06.745204Z","iopub.execute_input":"2024-07-08T18:58:06.745670Z","iopub.status.idle":"2024-07-08T18:58:06.751098Z","shell.execute_reply.started":"2024-07-08T18:58:06.745630Z","shell.execute_reply":"2024-07-08T18:58:06.749751Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":"## Review Data\nBefore building a model, take a quick look at **X** to verify it looks sensible","metadata":{}},{"cell_type":"code","source":"# Review data\n# print description or statistics from X\n# print(X)\n\n# print the top few lines\nprint(X.head(10))","metadata":{"execution":{"iopub.status.busy":"2024-07-08T18:58:06.752435Z","iopub.execute_input":"2024-07-08T18:58:06.752877Z","iopub.status.idle":"2024-07-08T18:58:06.771685Z","shell.execute_reply.started":"2024-07-08T18:58:06.752838Z","shell.execute_reply":"2024-07-08T18:58:06.770204Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"   LotArea  YearBuilt  1stFlrSF  2ndFlrSF  FullBath  BedroomAbvGr  \\\n0     8450       2003       856       854         2             3   \n1     9600       1976      1262         0         2             3   \n2    11250       2001       920       866         2             3   \n3     9550       1915       961       756         1             3   \n4    14260       2000      1145      1053         2             4   \n5    14115       1993       796       566         1             1   \n6    10084       2004      1694         0         2             3   \n7    10382       1973      1107       983         2             3   \n8     6120       1931      1022       752         2             2   \n9     7420       1939      1077         0         1             2   \n\n   TotRmsAbvGrd  \n0             8  \n1             6  \n2             6  \n3             7  \n4             9  \n5             5  \n6             7  \n7             7  \n8             8  \n9             5  \n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Step 3: Specify and Fit Model\nCreate a `DecisionTreeRegressor` and save it iowa_model. Ensure you've done the relevant import from sklearn to run this command.\n\nThen fit the model you just created using the data in `X` and `y` that you saved above.","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeRegressor\ny = home_data['SalePrice']\nX = home_data[feature_names]\n#For model reproducibility, set a numeric value for random_state when specifying the model\niowa_model = DecisionTreeRegressor(random_state=1)\n# print(iowa_model)\n\n# Fit the model\niowa_model.fit(X, y)\nprint(iowa_model)\n\n# Check your answer\nstep_3.check()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T18:58:06.776194Z","iopub.execute_input":"2024-07-08T18:58:06.776694Z","iopub.status.idle":"2024-07-08T18:58:06.807036Z","shell.execute_reply.started":"2024-07-08T18:58:06.776654Z","shell.execute_reply":"2024-07-08T18:58:06.805515Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"DecisionTreeRegressor(random_state=1)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_CreateModel\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"code","source":"# step_3.hint()\nstep_3.solution()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T18:58:06.808562Z","iopub.execute_input":"2024-07-08T18:58:06.808993Z","iopub.status.idle":"2024-07-08T18:58:06.821653Z","shell.execute_reply.started":"2024-07-08T18:58:06.808953Z","shell.execute_reply":"2024-07-08T18:58:06.819798Z"},"trusted":true},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 2, \"questionId\": \"3_CreateModel\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n```python\nfrom sklearn.tree import DecisionTreeRegressor\niowa_model = DecisionTreeRegressor(random_state=1)\niowa_model.fit(X, y)\n```","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n```python\nfrom sklearn.tree import DecisionTreeRegressor\niowa_model = DecisionTreeRegressor(random_state=1)\niowa_model.fit(X, y)\n```"},"metadata":{}}]},{"cell_type":"markdown","source":"## Step 4: Make Predictions\nMake predictions with the model's `predict` command using `X` as the data. Save the results to a variable called `predictions`.","metadata":{}},{"cell_type":"code","source":"predictions = iowa_model.predict(X)\nprint(predictions)\n\n# Check your answer\nstep_4.check()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T18:58:06.823741Z","iopub.execute_input":"2024-07-08T18:58:06.824657Z","iopub.status.idle":"2024-07-08T18:58:06.846166Z","shell.execute_reply.started":"2024-07-08T18:58:06.824607Z","shell.execute_reply":"2024-07-08T18:58:06.844369Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"[208500. 181500. 223500. ... 266500. 142125. 147500.]\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"4_MakePredictions\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"code","source":"# step_4.hint()\n# step_4.solution()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T18:58:06.848021Z","iopub.execute_input":"2024-07-08T18:58:06.848519Z","iopub.status.idle":"2024-07-08T18:58:06.854202Z","shell.execute_reply.started":"2024-07-08T18:58:06.848476Z","shell.execute_reply":"2024-07-08T18:58:06.852689Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":"## Think About Your Results\n\nUse the `head` method to compare the top few predictions to the actual home values (in `y`) for those same homes. Anything surprising?\n","metadata":{}},{"cell_type":"code","source":"# You can write code in this cell\n\ncomparison = pd.DataFrame({\n    'Actual': y.head(5),\n    'Predicted': predictions[:5]\n})\nprint(comparison)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-08T18:58:06.856075Z","iopub.execute_input":"2024-07-08T18:58:06.856530Z","iopub.status.idle":"2024-07-08T18:58:06.870246Z","shell.execute_reply.started":"2024-07-08T18:58:06.856493Z","shell.execute_reply":"2024-07-08T18:58:06.868931Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"   Actual  Predicted\n0  208500   208500.0\n1  181500   181500.0\n2  223500   223500.0\n3  140000   140000.0\n4  250000   250000.0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"It's natural to ask how accurate the model's predictions will be and how you can improve that. That will be you're next step.\n\n# Keep Going\n\nYou are ready for **[Model Validation](https://www.kaggle.com/dansbecker/model-validation).**\n","metadata":{}},{"cell_type":"markdown","source":"---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-machine-learning/discussion) to chat with other learners.*","metadata":{}}]}